{"version":3,"sources":["components/Profile.js","components/ProfileStatsList.js","components/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","name","tag","location","avatar","className","src","alt","ProfileStatsList","stats","followers","views","likes","Statistics","id","label","percentage","App","user","statisticalData","map","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qwBAGMA,EAAU,SAAC,GAKV,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,SACAC,EACI,EADJA,OAEA,OACE,sBAAKC,UAAU,cAAf,UACE,qBACEC,IAAKF,EACLG,IAAI,cACJF,UAAU,WAEZ,oBAAGA,UAAU,OAAb,UAAoB,cAAC,IAAD,IAApB,IAAmCJ,KACnC,mBAAGI,UAAU,MAAb,SAAoBH,IACpB,oBAAGG,UAAU,WAAb,UAAwB,cAAC,IAAD,IAAxB,IAA4CF,SChB5CK,EAAmB,SAAC,GAKpB,EAJJC,MAIK,IAHLC,EAGI,EAHJA,UACAC,EAEI,EAFJA,MACAC,EACI,EADJA,MAEA,OACE,qBAAIP,UAAU,QAAd,UACE,+BACE,sBAAMA,UAAU,QAAhB,uBACA,sBAAMA,UAAU,WAAhB,SAA4BK,OAE9B,+BACE,sBAAML,UAAU,QAAhB,mBACA,sBAAMA,UAAU,WAAhB,SAA4BM,OAE9B,+BACE,sBAAMN,UAAU,QAAhB,mBACA,sBAAMA,UAAU,WAAhB,SAA4BO,WClB9BC,EAAa,SAAC,GAId,EAHJC,GAGK,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,WAEA,OACI,oBAAIX,UAAU,YAAd,SACE,qBAAIA,UAAU,OAAd,UACI,sBAAMA,UAAU,QAAhB,SAAyBU,IAC3B,uBAAMV,UAAU,aAAhB,UAA8BW,EAA9B,aCJV,SAASC,IACP,OACE,sBAAKZ,UAAU,UAAf,UACE,cAAC,EAAD,CAEEJ,KAAMiB,EAAKjB,KACXC,IAAKgB,EAAKhB,IACVC,SAAUe,EAAKf,SACfC,OAAQc,EAAKd,SAEf,cAAC,EAAD,CACEK,MAAOS,EAAKT,MACZC,UAAWQ,EAAKT,MAAMC,UACtBC,MAAOO,EAAKT,MAAME,MAClBC,MAAOM,EAAKT,MAAMG,QAEpB,0BAASP,UAAU,aAAnB,UACE,oBAAIA,UAAU,QAAd,0BACCc,EAAgBC,KAAI,SAAAC,GAAI,OACvB,cAAC,EAAD,CACEP,GAAIO,EAAKP,GACTC,MAAOM,EAAKN,MACZC,WAAYK,EAAKL,sBC7B7B,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a7ee230f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { FaMapMarkerAlt, FaUserAlt } from \"react-icons/fa\";\r\n\r\nconst Profile = ({\r\n  name,\r\n  tag,\r\n  location,\r\n  avatar,\r\n}) => {\r\n  return (\r\n    <div className=\"description\">\r\n      <img\r\n        src={avatar}\r\n        alt=\"user avatar\"\r\n        className=\"avatar\"\r\n      />\r\n      <p className=\"name\"><FaUserAlt /> {name}</p>\r\n      <p className=\"tag\">{tag}</p>\r\n      <p className=\"location\"><FaMapMarkerAlt /> {location}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nProfile.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  avatar: PropTypes.node,\r\n}\r\n\r\nexport {Profile}","import PropTypes from 'prop-types';\r\n\r\nconst ProfileStatsList = ({\r\n  stats,\r\n  followers,\r\n  views,\r\n  likes,\r\n}) => {\r\n  return (\r\n    <ul className=\"stats\">\r\n      <li>\r\n        <span className=\"label\">Followers</span>\r\n        <span className=\"quantity\">{followers}</span>\r\n      </li>\r\n      <li>\r\n        <span className=\"label\">Views</span>\r\n        <span className=\"quantity\">{views}</span>\r\n      </li>\r\n      <li>\r\n        <span className=\"label\">Likes</span>\r\n        <span className=\"quantity\">{likes}</span>\r\n      </li>\r\n    </ul>\r\n  )\r\n};\r\n\r\nProfileStatsList.propTypes = {\r\n  stats: PropTypes.arrayOf().isRequired,\r\n  followers: PropTypes.number.isRequired,\r\n  views: PropTypes.number.isRequired,\r\n  likes:PropTypes.number.isRequired,\r\n}\r\n\r\nexport { ProfileStatsList };","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({\r\n  id,\r\n  label,\r\n  percentage,\r\n}) => {\r\n  return (\r\n      <ul className=\"stat-list\">\r\n        <li className=\"item\">\r\n            <span className=\"label\">{label}</span>\r\n          <span className=\"percentage\">{percentage}%</span>\r\n        </li>\r\n      </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  percentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport { Statistics };","import './App.css';\nimport user from './user.json';\nimport statisticalData from './statistical-data';\nimport { Profile } from './components/Profile';\nimport { ProfileStatsList } from './components/ProfileStatsList';\nimport { Statistics } from './components/Statistics';\n\nfunction App() {\n  return (\n    <div className=\"profile\">\n      <Profile\n        // key={tag}\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n      />\n      <ProfileStatsList\n        stats={user.stats}\n        followers={user.stats.followers}\n        views={user.stats.views}\n        likes={user.stats.likes}\n      />\n      <section className=\"statistics\">\n        <h2 className=\"title\">Upload stats</h2>\n        {statisticalData.map(data => (\n          <Statistics\n            id={data.id}\n            label={data.label}\n            percentage={data.percentage}\n          />\n        ))}\n      </section>\n    </div>\n    // \n  )\n}\n\nexport { App };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}